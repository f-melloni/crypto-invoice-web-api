@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Authentication
@using WebApi.Database.Entities
@using WebApi.Models.AccountViewModels
@model LoginViewModel
@inject SignInManager<User> SignInManager
@{
    ViewData["Title"] = "Log in";
    Layout = "_LoginLayout";
}

<v-container fluid>
    <v-layout row>
        <v-flex xs12 sm6 offset-sm3>
            <v-card class="mb-2">
                <v-card-text>
                    <h1>@ViewData["Title"]</h1>
                </v-card-text>
            </v-card>
        </v-flex>
    </v-layout>

    <v-form ref="form" v-model="valid" method="post" action="/Account/Login?returnUrl=@ViewData["ReturnUrl"]">
        <v-layout row>
            <v-flex xs12 sm6 offset-sm3>
                <v-card class="mb-2">
                    <v-card-title>
                        <h2>Use a local account to log in...</h2>
                    </v-card-title>
                    <v-card-text>
                        <div class="alert error" asp-validation-summary="ModelOnly"></div>
                        
                        <v-layout row>
                            <v-flex xs12>
                                <v-text-field @@input="validate" required type="email" label="E-mail" name="Email" v-model="model.Email" :rules="[rules.notEmpty, rules.email]"></v-text-field>
                            </v-flex>
                        </v-layout>
                        <v-layout row>
                            <v-flex xs12>
                                <v-text-field @@input="validate" required type="password" label="Password" name="Password" :rules="[rules.notEmpty]"></v-text-field>
                            </v-flex>
                        </v-layout>
                        <v-layout row>
                            <v-flex xs2>
                                <v-checkbox value="true" color="primary" label="Remember me" v-model="model.RememberMe" name="RememberMe"></v-checkbox>
                            </v-flex>
                            <v-spacer></v-spacer>
                        </v-layout>
                    </v-card-text>
                </v-card>
            </v-flex>
        </v-layout>
        <v-layout row>
            <v-flex xs12 sm6 offset-sm3>
                <v-card class="mb-2">
                    <v-card-text>
                        <v-layout row>
                            <v-btn @@click="submit" :disabled="!valid" color="primary">Log in</v-btn>
                            <div class="spacer"></div>
                            <v-btn href="/Account/ForgotPassword" class="px-3 mr-4">Lost password?</v-btn>
                            <v-btn href="/Account/Register?returnUrl=@ViewData["ReturnUrl"]" class="px-3">Create account</v-btn>
                        </v-layout>
                    </v-card-text>
                </v-card>
            </v-flex>
        </v-layout>
        <div class="d-none">
            <input asp-for="RememberMe" />
            @Html.AntiForgeryToken()
        </div>
    </v-form>
</v-container>

@section Scripts {
    <script>
        new Vue({
            el: '#app',
            data: () => ({
                valid: false,
                model: {
                    Email: '',
                    Password: '',
                    RememberMe: false
                },
                rules: {
                    email: (value) => {
                        const pattern = /^(([^<>()[\]\\.,;:\s@@"]+(\.[^<>()[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                        return pattern.test(value) || 'Invalid e-mail.'
                    },
                    notEmpty: (value) => {
                        return (value || '').length > 0 || 'This field is required';
                    }
                }
            }),
            methods: {
                submit () {
                    if(this.$refs.form.validate()) {
                        $('input[name=RememberMe]').prop('checked', this.model.RememberMe);
                        $(this.$refs.form.$el).submit();
                    }
                },
                validate() {
                    this.$refs.form.validate();
                }
            }
        });
    </script>
}